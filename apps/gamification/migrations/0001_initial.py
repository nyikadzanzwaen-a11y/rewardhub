# Generated by Django 5.2.4 on 2025-08-31 07:59

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('milestone', 'Milestone'), ('frequency', 'Frequency'), ('streak', 'Streak'), ('social', 'Social'), ('seasonal', 'Seasonal'), ('special', 'Special Event')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('points_reward', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('criteria', models.JSONField(default=dict, help_text='Badge earning criteria')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='tenants.tenant')),
            ],
            options={
                'ordering': ['rarity', 'name'],
                'unique_together': {('tenant', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('first_time', 'First Time'), ('milestone', 'Milestone'), ('perfect', 'Perfect Score'), ('speed', 'Speed Achievement'), ('consistency', 'Consistency'), ('social', 'Social Achievement')], max_length=20)),
                ('points_reward', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('criteria', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='tenants.tenant')),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('tenant', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('points', 'Points Challenge'), ('visits', 'Visit Challenge'), ('streak', 'Streak Challenge'), ('social', 'Social Challenge'), ('spending', 'Spending Challenge')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('extreme', 'Extreme')], default='medium', max_length=20)),
                ('target_value', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('points_reward', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('duration_days', models.IntegerField(blank=True, help_text='Challenge duration in days', null=True)),
                ('criteria', models.JSONField(default=dict, help_text='Challenge completion criteria')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='tenants.tenant')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='CustomerAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('context_data', models.JSONField(default=dict, help_text='Context when achievement was earned')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.achievement')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='customers.customer')),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('customer', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='CustomerBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(default=dict, help_text='Progress tracking data')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.badge')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='customers.customer')),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('customer', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='CustomerChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('failed', 'Failed'), ('expired', 'Expired')], default='active', max_length=20)),
                ('current_progress', models.IntegerField(default=0)),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_progress_update', models.DateTimeField(auto_now=True)),
                ('progress_data', models.JSONField(default=dict, help_text='Detailed progress tracking')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.challenge')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='customers.customer')),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('customer', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('points', 'Points Leaderboard'), ('visits', 'Visits Leaderboard'), ('streak', 'Streak Leaderboard'), ('badges', 'Badges Leaderboard'), ('challenges', 'Challenges Leaderboard')], max_length=20)),
                ('timeframe', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('all_time', 'All Time')], max_length=20)),
                ('max_entries', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_public', models.BooleanField(default=True)),
                ('rewards_config', models.JSONField(default=dict, help_text='Rewards for top positions')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('tenant', 'name')},
            },
        ),
    ]
